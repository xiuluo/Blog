<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[用ffmpeg快速校验目录内的视频文件的完整性]]></title>
      <url>/2018/03/09/quickly-check-the-integrity-of-video-files-inside-a-directory-with-ffmpeg/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Mar 09 2018 20:03:35 GMT+0800 (CST) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次遇到遇到损坏的视频文件，想来应该是用VPS下载时文件出现了问题。用神器ffmpeg可在vps上快速地校验视频完整性。避免出现我这种用学校的小水管从vps拖回本地，下载了一个下午发现文件是损坏的悲剧。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -v error -i filename.mkv -map 0:1 -f null -</span><br></pre></td></tr></table></figure><h2 id="规范化文件名"><a href="#规范化文件名" class="headerlink" title="规范化文件名"></a>规范化文件名</h2><p>我在下载动画的时候经常遇到类似于这种”[压制组&amp;组2] 番名 [GB][1080P][x264_AAC×2].mp4”的文件，此文件名不符合Linux对文件名的规范要求，此时用下面的命令将无法生成log文件，需要批量重命名文件使其规范化。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">'s/[ ]+/_/g'</span> *</span><br><span class="line">rename <span class="string">"s/&amp;/-/g"</span> *</span><br></pre></td></tr></table></figure><p></p><h2 id="递归检测"><a href="#递归检测" class="headerlink" title="递归检测"></a>递归检测</h2><p>递归的对整个目录的视频文件进行快速校验，并且对每个视频文件都生成一个相对应的错误日志文件。如果没有错误则是个空文件。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.mkv"</span> -o -name <span class="string">"*.mp4"</span> -<span class="built_in">exec</span> sh -c <span class="string">"ffmpeg -v error -i &#123;&#125; -map 0:1 -f null - 2&gt;&#123;&#125;.log"</span> \;</span><br></pre></td></tr></table></figure><p></p><p>##效果<br><img src="https://ws1.sinaimg.cn/large/77b38843gy1fp6s1vtmu4j20pr0ef76o.jpg" alt=""><br>用ll列出目录内文件，若log文件不为空则说明视频文件出现了错误。<br><img src="https://ws1.sinaimg.cn/large/77b38843gy1fp6sznk57nj20k103mq33.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/77b38843gy1fp6sxhf8sbj20mg0l8gqv.jpg" alt=""></p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://stackoverflow.com/questions/34077302/quickly-check-the-integrity-of-video-files-inside-a-directory-with-ffmpeg" target="_blank" rel="noopener">https://stackoverflow.com/questions/34077302/quickly-check-the-integrity-of-video-files-inside-a-directory-with-ffmpeg</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Linux kernel 4.13上使用BBR魔改版]]></title>
      <url>/2018/01/30/tcp_tsunami-on-linux-kernel-4.13/</url>
      <content type="html"><![CDATA[<!-- build time:Mon Feb 12 2018 22:08:17 GMT+0800 (CST) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>所谓的bbr魔改版最初是由hostloc论坛的用户Yankee发布的。因为原贴设置了阅读权限，所以我只能找到<a href="https://www.91yun.co/archives/16781" target="_blank" rel="noopener">转帖</a>和其修改的<a href="https://gist.githubusercontent.com/anonymous/ba338038e799eafbba173215153a7f3a/raw/55ff1e45c97b46f12261e07ca07633a9922ad55d/tcp_tsunami.c" target="_blank" rel="noopener">源码</a>。该魔改版通过修改bbr中的一些参数使该拥塞协议较之Linux kernel中的协议更加“暴力”(但与此同时也破坏了tcp的公平性，如果这样做的人多了，反而会引起更加严重的网络拥塞)，解决拥塞的效果更加明显。但是该修改版无法在Linux kernel 4.13+上编译，需要使用<a href="https://github.com/liberal-boy/tcp_tsunami" target="_blank" rel="noopener">另一个修改版</a>。</p><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><ol><li><p>使用root权限在shell里依次输入一下命令，编译内核模块并插入内核，启用新的拥塞协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt install make gcc</span><br><span class="line">wget -O ./tcp_tsunami.c https://raw.githubusercontent.com/liberal-boy/tcp_tsunami/master/tcp_tsunami.c</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"obj-m:=tcp_tsunami.o"</span> &gt; Makefile</span><br><span class="line">make -C /lib/modules/$(uname -r)/build M=`<span class="built_in">pwd</span>` modules CC=/usr/bin/gcc</span><br><span class="line">cp -rf ./tcp_tsunami.ko /lib/modules/$(uname -r)/kernel/net/ipv4</span><br><span class="line">insmod tcp_tsunami.ko</span><br><span class="line">sysctl -w net.core.default_qdisc=fq</span><br><span class="line">sysctl -w net.ipv4.tcp_congestion_control=tsunami</span><br></pre></td></tr></table></figure></li><li><p>查看内核模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep tcp_tsunami</span><br></pre></td></tr></table></figure></li><li><p>查看tcp拥塞协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_congestion_control</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/77b38843ly1fnymle445tj20h404gq32.jpg" alt="tcp_tsunami"></p><p>PS:重启后需要重新加载内核，启用协议(为了安全起见，不要设置自启)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insmod tcp_tsunami.ko</span><br><span class="line">sysctl -w net.core.default_qdisc=fq</span><br><span class="line">sysctl -w net.ipv4.tcp_congestion_control=tsunami</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>服务器：<a href="https://m.do.co/c/4c2ccc8b2845" target="_blank" rel="noopener">digitalocean</a>旧金山2号机房+共享1G出口带宽(Linux ubuntu 4.13.0-32-generic #35-Ubuntu SMP Thu Jan 25 09:13:46 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux)</p><p>客户端：<a href="https://wikidevi.com/wiki/MediaTek_MT7621" target="_blank" rel="noopener">MediaTek MT7621</a> + 50M中国移动带宽(Linux RT-N56U_B1 3.4.113 #3 SMP Tue Jan 16 23:14:25 CST 2018 mips GNU/Linux)</p><p>​ 在两个著名的测试网站测试，都能很快达到宽带的标称速率，当然这主要归功于移动国际出口的用户少，没有明显的拥塞，如果是电信的163线路，再暴力的拥塞协议都抵不过ISP的QoS。<img src="https://ws1.sinaimg.cn/large/77b38843ly1fnymm0n2vpj20jt0nyq3k.jpg" alt="speedtest"></p><p><img src="https://ws1.sinaimg.cn/large/77b38843ly1fnymqmih96j20rj0c4q3k.jpg" alt="speedtest"></p><p><a href="http://www.speedtest.net/result/7012575922" target="_blank" rel="noopener">http://www.speedtest.net/result/7012575922</a></p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><ol><li>之所以50M带宽，能跑出50M以上的速度。我猜测可能是因为移动在流量整形中使用了<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">令牌桶算法</a>，该算法能够在限制数据的平均传输速率的同时还允许某种程度的突发传输。但是这些流量都是你自己令牌桶中剩余的，所以你是无法一直突破标称速率的。</li><li>speedtest里显示Google是因为我修改了http header里的X-Forwarded-For参数，很多网站提供这个参数获取用户在访问时CDN的IP地址，但是显然这种做法并不安全。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> bbr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[又双叒叕迁移网站了]]></title>
      <url>/2018/01/13/migration-again/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用了一下午的时间又又将网站转移到了github page上。现在hexo的生态圈很成熟，动态博客的一些功能都能找到相应的插件替代，甚至连<a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">后台管理</a>的插件都有了。<br><img src="https://ws1.sinaimg.cn/large/77b38843ly1fnf5jqsyxej212c0jj76e.jpg" alt="hexo-admin"></p><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><p>github pages配合cloudflare CDN应该能持续很久不用迁移网站。虽然因为科学上网的需求我有一些海外vps，但是回顾一下去年gfw的疯狂认证，还是低调使用吧。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>eu.org从1996年开始提供免费域名服务，虽然是二级域名，可是能够被搜索引擎收录，已经很好了。不知道为什么，于2015年被gfw认证，不过可以用https+HSTS+HSTS preload list完美解决。</p><h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next主题</a>比我16年用的时候功能丰富了许多而且文档也很详尽，主要集成了很多第三方服务和插件，让静态博客也有了动态博客的体验。</p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>用的是Chrome扩展，由新浪提供服务器资源，支持https，还提供MD格式的导出，很方便。<br><img src="https://ws1.sinaimg.cn/large/77b38843ly1fnf5lbvecgj20ws0mo0ti.jpg" alt="sina-picture"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>博客能提供一个安安静静写东西的地方即可，不用太多折腾，还是用海外的免费服务长久一些。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 站点 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next-theme </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[路由器上连接Windows VPN提示MTU过小的解放方案]]></title>
      <url>/2017/05/24/%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E8%BF%9E%E6%8E%A5Windows%20VPN%E6%8F%90%E7%A4%BAMTU%E8%BF%87%E5%B0%8F%E7%9A%84%E8%A7%A3%E6%94%BE%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近看路由器日志里一堆错误，都是</p><pre><code>May 24 16:28:43 kernel: mppe_compress[5]: osize too small! (have: 1408 need: 1412)
May 24 16:28:43 kernel: ppp5: ppp: compressor dropped pkt
May 24 16:28:43 kernel: mppe_compress[5]: osize too small! (have: 1408 need: 1412)
May 24 16:28:43 kernel: ppp5: ppp: compressor dropped pkt
May 24 16:28:43 kernel: mppe_compress[5]: osize too small! (have: 1408 need: 1412)
May 24 16:28:43 kernel: ppp5: ppp: compressor dropped pkt
May 24 16:29:25 kernel: mppe_compress[5]: osize too small! (have: 1408 need: 1412)
May 24 16:29:25 kernel: ppp5: ppp: compressor dropped pkt
May 24 16:29:25 kernel: mppe_compress[5]: osize too small! (have: 1408 need: 1412)
May 24 16:29:25 kernel: ppp5: ppp: compressor dropped pkt
May 24 16:29:25 kernel: mppe_compress[5]: osize too small! (have: 1408 need: 1412)
May 24 16:29:25 kernel: ppp5: ppp: compressor dropped pkt
May 24 16:29:25 kernel: mppe_compress[5]: osize too small! (have: 1408 need: 1412)
May 24 16:29:25 kernel: ppp5: ppp: compressor dropped pkt
</code></pre><p>因为我上网是通过连接网络中心的VPN（搭建在Windows Server）解决的，虽然出现这个错误时不影响联网。但是强迫症迫使我要解决掉它。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>一开始我以为是路由器设置原因，但是看路由器上有关MTU的设置均大于提示的1408。后来发现原来是Windows VPN服务器的问题，在Windows的cmd中输入<code>netsh interface ipv4 show subinterfaces</code>。会发现它将所有的VPN连接的MTU限制在了1400。然后在路由器的shell中输入<code>ifconfig ppp5</code>会发现路由器与Windows VPN协商后将MTU限制为1400。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>既然是Windows的问题，于是我尝试着将Windows VPN的MTU提高，但是实测无效，只能在路由器上执行<code>ifconfig ppp5 mtu 1404</code>强行将MTU提高，问题解决。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 折腾 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[[蓝桥杯]2017年模拟赛-排列序数]]></title>
      <url>/2017/03/30/%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%5D2017%E5%B9%B4%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%8E%92%E5%88%97%E5%BA%8F%E6%95%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>X星系的某次考古活动发现了史前智能痕迹。<br>这是一些用来计数的符号，经过分析它的计数规律如下：<br>（为了表示方便，我们把这些奇怪的符号用a~q代替）</p><p>abcdefghijklmnopq 表示0<br>abcdefghijklmnoqp 表示1<br>abcdefghijklmnpoq 表示2<br>abcdefghijklmnpqo 表示3<br>abcdefghijklmnqop 表示4<br>abcdefghijklmnqpo 表示5<br>abcdefghijklmonpq 表示6<br>abcdefghijklmonqp 表示7<br>…..</p><p>在一处石头上刻的符号是：<br>bckfqlajhemgiodnp</p><p>请你计算出它表示的数字是多少？</p><p>请提交该整数，不要填写任何多余的内容，比如说明或注释。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一开始看到这题立马想用next_permutation()暴力求解，可是看了一下位数，这样的解析树太大了，这个思路肯定不行。思索很久没有想法后，求助于搜索引擎。然后知道了全排列还有种叫<a href="https://zh.wikipedia.org/zh-hans/康托展开" target="_blank" rel="noopener">康托展开</a>，<a href="http://www.cnblogs.com/1-2-3/archive/2011/04/25/generate-permutation-part2.html" target="_blank" rel="noopener">白话算法(7) 生成全排列的几种思路(二) 康托展开</a>。可是网上的大多数算法都是自己实现没有充分利用STL的优势，其实用上STL后，代码能够简化很多。</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><pre><code>#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;

//阶乘 
long long fn(int n) {
    long long a = 1;
    for(int i = 1; i &amp;lt;= n; i++) {
        a *= i;
    }
    return a;
}

//子数组的首元素在子数组中的字典序位置 
long long an(string str) {
    char ch = str[0];
    sort(str.begin(), str.end());
    return str.find(ch);
}

int main()
{
    long long sum = 0;
    string s = &quot;bckfqlajhemgiodnp&quot;;
    int len = s.length();
    for (int i = 0; i &amp;lt; s.length(); i++) {
        sum += fn(len-i-1) * an(s.substr(i));
    }
    cout &amp;lt;&amp;lt; sum;
    return 0;
}
//结果：22952601027516
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> OJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lex和Yacc在Windows中的使用]]></title>
      <url>/2017/03/29/Lex%E5%92%8CYacc%E5%9C%A8Windows%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h1 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h1><p>Lex&amp;Yacc是Unix中的工具，如果你想在Linux or 类Linux的os上使用，可以安装其对应的gnu实现版本，Flex&amp;Bison。而我还是习惯使用Windows，所幸msys2中有这两个工具，再配合vs code中的高亮插件，用起来还是很happy的！<br><img src="http://static.cxfer.cn/img/lex&amp;yacc-vscode.jpg" alt="vscode"></p><h1 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h1><p>在msys2环境中输入</p><pre><code>pacman -S flex bison
`&lt;/pre&gt;

　　在vs code按Ctrl + P然后输入

&lt;pre&gt;`ext install vscode-yacc
ext install lex
`&lt;/pre&gt;

　　生成并编译

&lt;pre&gt;`lex a.lex &amp;amp;&amp;amp; gcc -o parser lex.yy.c -lfl &amp;amp;&amp;amp; ./parser
`&lt;/pre&gt;

　　至此就能愉快的在Windows上使用Lex&amp;amp;Yacc了，写本文的目的是记录一个小坑：即用flex生成的.c文件，无法直接用gcc编译，需要使用-lfl选项，否则gcc会报错

&lt;pre&gt;`/c/Users/chen9/AppData/Local/Temp/ccgBARrF.o:lex.yy.c:(.text+0x539): undefined reference to `yywrap&apos;
/c/Users/chen9/AppData/Local/Temp/ccgBARrF.o:lex.yy.c:(.text+0x539): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `yywrap&apos;
/c/Users/chen9/AppData/Local/Temp/ccgBARrF.o:lex.yy.c:(.text+0x1166): undefined reference to `yywrap&apos;
/c/Users/chen9/AppData/Local/Temp/ccgBARrF.o:lex.yy.c:(.text+0x1166): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `yywrap&apos;
/usr/lib/../lib/libmsys-2.0.a(libcmain.o): In function `main&apos;:
/msys_scripts/msys2-runtime/src/msys2-runtime/winsup/cygwin/lib/libcmain.c:37: undefined reference to `WinMain&apos;
/msys_scripts/msys2-runtime/src/msys2-runtime/winsup/cygwin/lib/libcmain.c:37:(.text.startup+0x94): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `WinMain&apos;
collect2: error: ld returned 1 exit status
</code></pre><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 编程语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lex </tag>
            
            <tag> yacc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次曲折的系统更新]]></title>
      <url>/2016/08/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9B%B2%E6%8A%98%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><p>今天下午看书看得无聊了，想到放博客的VPS好久没有更新软件了，忍不住登陆上VPS准备更新软件。可是不知道是不是以前没注意，反正今天登陆的时候就看到下面的提示：<br><img src="http://static.cxfer.cn/img/2016082403.jpg" alt="do-release-upgrade"></p><h2 id="初次更新"><a href="#初次更新" class="headerlink" title="初次更新"></a>初次更新</h2><p>身为中度强迫症患者的我，看到让我更新的提示，肯定忍不住去更新了。于是我在没有备份的情况下，直接在我博客的VPS上按照提示输入<code>do-rekease-upgrade</code>，然后跟着提示一路Y，最后因为腾讯云的默认源没有16.04的源而更新失败。</p><h2 id="备份快照"><a href="#备份快照" class="headerlink" title="备份快照"></a>备份快照</h2><p>既然没有源，那么我就换个源呗。把腾讯云的内外源换成阿里云的源之后我再次准备升级。但是我突然想到，我万一升级失败了怎么办？然后想到腾讯云有个快照功能，反正现在还是免费试用的，在生产环境上升级系统还是要备份一下的(其实我根本没有重视备份)。<br><img src="http://static.cxfer.cn/img/2016082402.jpg" alt="tencetnyun-snap"></p><h2 id="再度更新"><a href="#再度更新" class="headerlink" title="再度更新"></a>再度更新</h2><p>备份完成之后，继续入<code>do-release-upgrade</code>，然后一路Y。终于在十几分钟之后，更新完成了(PS：我的主机虽然是1MB公网带宽，但其实是上行的，下行带宽是10MB，我下载阿里云源能到1.2MB/s，腾讯云这点还是挺良心的，要是下行也1MB，那得更新多久啊！ )</p><h2 id="PHP启动失败"><a href="#PHP启动失败" class="headerlink" title="PHP启动失败"></a>PHP启动失败</h2><p>更新完系统重启之后，立刻打开我的博客，看看环境有没有问题，结果<br><img src="http://static.cxfer.cn/img/2016082401.jpg" alt="502"><br>502错误说明nginx正常，估计是php挂了。手动运行php，果然提示错误：</p><pre><code>php: error while loading shared libraries: libicui18n.so.52: cannot open shared object file: No such file or directory
`&lt;/pre&gt;

## 恢复

&quot;辛亏之前创建过快照&quot;我当时心想，然后也没去搜索怎么解决这个错误，而是登录后台，关机，恢复快照。完成之后启动VPS，果然一切都恢复正常。可是登录VPS还是提示让我更新，自从注意到这个提示之后，我就再也不能忽视它了。

## 再度升级及排错

搜索到之前那个问题的解决方法之后，决定再次更新，后悔刚刚没有创建快照，还得重新下载文件更新。更新完成之后，手动下载安装&quot;libicu52_52.1-3ubuntu0.4_i386.deb&quot;。php虽然不报错了，但是还是无法启动。重启安装之后提示

&lt;pre&gt;`Error establishing a database connection
`&lt;/pre&gt;

重新安装mysql-server，然后修改php.ini文件

&lt;pre&gt;`mysqli.default_socket = /var/run/mysqld/mysqld.sock
</code></pre><p>挂了几个小时的博客终于恢复正常了，赶紧保存个快照。</p><h2 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h2><p>我在vps上运行screenfetch居然让xshell崩溃了，难道因为那些组成ubuntu Logo的符号吗？很奇怪啊。<br><img src="http://static.cxfer.cn/img/2016082404.jpg" alt="xshell"></p><h2 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h2><p><img src="http://static.cxfer.cn/img/2016082405.jpg" alt="screenfetch"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>生成环境上进行大版本升级前一定要备份啊！！！如果这次没有快照&amp;系统更新失败，虽然文件和数据都在，但是恢复起来太麻烦了。</li><li>快照能节约时间。有了快照之后进行一些重要的操作就方便多了。目前腾讯云的快照功能还处于免费试用状态，能创建七个快照，希望试用结束之后，能给用户至少要保留一个免费额度。</li><li>跨版本更新系统后，最好重新编译安装一下lnmp环境。</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> 腾讯云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio gradle代理https失败的解决办法]]></title>
      <url>/2016/08/10/Android-Studio-gradle%E4%BB%A3%E7%90%86https%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章所有的方法全都是在stackoverflow上找到的，我也是最近强迫自己使用英语搜索，才发现stackoverflow的好处。以前虽然看一些大牛说stackoverflow是开发者圣，但是我基本都是用中文作为关键词搜索，虽然同样是在Google上搜索，但是找到的内容不可相提并论。越来越后悔以前没有好好学英语了，只能慢慢补了。</p><h2 id="设置gradle代理"><a href="#设置gradle代理" class="headerlink" title="设置gradle代理"></a>设置gradle代理</h2><p>在 USER_HOME/.gradle/中新建一个gradle.properties，然后输入以下内容<br>xx-net</p><pre><code>systemProp.http.proxyHost=127.0.0.1
systemProp.http.proxyPort=8087
systemProp.https.proxyHost=127.0.0.1
systemProp.https.proxyPort=8087
`&lt;/pre&gt;

ss

&lt;pre&gt;`systemProp.https.proxyHost=127.0.0.1
systemProp.https.proxyPort=1080
systemProp.http.proxyHost=127.0.0.1
systemProp.http.proxyPort=1080
systemProp.socks.proxyHost=127.0.0.1
systemProp.socks.proxyPort=1080
`&lt;/pre&gt;

## 解决https证书错误

设置好代理之后，可能出现htpps代理失败的问题。因为jc库默认是https的，我用的免费代理软件，需要导入自签证书才能使用。然而我安装官方教程使用keytool向java导入了CA证书，还是无法使用。一般会显示如下的错误

&lt;pre&gt;`&quot;Error:(26, 13) Failed to resolve: com.alibaba:fastjson:1.1.34.android&quot;
&quot;Error:A problem occurred configuring project &apos;:app&apos;.peer not authenticated.
`&lt;/pre&gt;

去代理软件后台看到其报错

&lt;pre&gt;`Aug 10 16:59:59.618 - [INFO] ssl error: [SSL: SSLV3_ALERT_CERTIFICATE_UNKNOWN] sslv3 alert certificate unknown (_ssl.c:590),create full domain cert for host:jcenter.bintray.com
`&lt;/pre&gt;

就是因为软件不能信任我们自己的证书，所以导致https通讯失败。而解决办法就是将jcenter仓库地址替换为http。即将build.gradle中的

&lt;pre&gt;`repositories {
    jacenter()
}
`&lt;/pre&gt;

全部替换为(应该有两个，一个是app的，一个是module的)

&lt;pre&gt;`repositories {
    jcenter 
    { 
        url &apos;http://jcenter.bintray.com&apos; 
    } 
}
`&lt;/pre&gt;

## 永久替换jcenter()

按照上述方法，就成功的设置了代理。但是缺点是需要每次新建项目后都修改一下仓库地址，尤其是初学Android时，基本上每个示例都要新建一个项目，难不成每个都改一遍么？当然不可能，自然有替换方法，将下面的内容，保存为init.gradle，和gradle.properties一样，也放到USER_HOME/.gradle/中。

&lt;pre&gt;`allprojects{
    repositories {
        def REPOSITORY_URL = &apos;http://jcenter.bintray.com/&apos;
        all { ArtifactRepository repo -&amp;gt;
            println repo.url.toString()
            if ((repo instanceof MavenArtifactRepository) &amp;amp;&amp;amp; repo.url.toString().startsWith(&quot;https://jcenter.bintray.com/&quot;)) {
                project.logger.lifecycle &quot;Repository ${repo.url} replaced by $REPOSITORY_URL.&quot;
                remove repo
            }   
        }
        jcenter { 
            url REPOSITORY_URL
        }
    }
}
</code></pre><p>重新打开Android Studio并进行同步gradle，你会发现一切都正常了。</p><p>init.gradle是Gradle的初始化脚本(Initialization Scripts)，会再每次gradle运行时执行，即上述代码是在gradle运行时修改jcenter仓库链接而不会去修改build.gradle文件里的内容。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>主要参考了以下链接的内容<br><a href="https://stackoverflow.com/questions/27056733/change-gradle-mavencentral-url-to-my-repo" target="_blank" rel="noopener">https://stackoverflow.com/questions/27056733/change-gradle-mavencentral-url-to-my-repo</a><br><a href="http://stackoverflow.com/questions/27206040/android-studio-intellij-gradle-errorcause-peer-not-authenticated" target="_blank" rel="noopener">https://stackoverflow.com/questions/27206040/android-studio-intellij-gradle-errorcause-peer-not-authenticated</a><br><a href="http://gradle.org/docs/current/userguide/init_scripts.html" target="_blank" rel="noopener">http://gradle.org/docs/current/userguide/init_scripts.html</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu上Chrome闪屏症状的缓解之旅]]></title>
      <url>/2016/08/06/Ubuntu%E4%B8%8AChrome%E9%97%AA%E5%B1%8F%E7%97%87%E7%8A%B6%E7%9A%84%E7%BC%93%E8%A7%A3%E4%B9%8B%E6%97%85/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>以前用deepin系统的时候，都没遇到过chrome闪屏的，现在用ubuntu反而经常闪屏，而且和特定网页有关，比如访问baidu(说好的不用baidu只用google呢？)就会出现闪屏，而访问Google却很正常。</p><p><img src="http://static.cxfer.cn/img/201608064.png" alt="chrome"></p><h2 id="尝试寻找解决方案"><a href="#尝试寻找解决方案" class="headerlink" title="尝试寻找解决方案"></a>尝试寻找解决方案</h2><p>遇到问题当然第一时间搜索喽，可是搜来搜去都没有找到适合我的解决方案，网上大部分问题都是因为独立显卡的选择驱动问题，而我的是Intel核显，没有闭源驱动。</p><p>于是尝试自己解决：<br>1. 想到是否是驱动问题，因为intel驱动都是集成在系统内核中，所以我更新到最新的linux稳定版内核，但是问题依旧。deepin里无此问题，换上与deppin相同版本的内容，还是没有用，于是我就放弃了(手动滑稽)。<br>2. 正好Windows10一周年正式版发布，我就开开心心地去安装了Window，兴趣十足地折腾起了WSL。折腾一段时间之后，又想用原生Ubuntu了(双系统就是自信)，于是再次搜索，终于在一个外国网站，看到有人说可能和GPU加速有关。<br>3. 这个我会啊，去chrome://flags/就能关了啊。但是我打开chrome://flags/之后发现<br><img src="http://static.cxfer.cn/img/201608065.png" alt="chrome"><br>4. 最后想到windows可以通过快捷方式添加参数，Linux应该也可以，然后就试了一下，果然可以<br><img src="http://static.cxfer.cn/img/201608061.png" alt="chrome"><br>5. 编辑google-chrome.desktop，按下图添加参数<br><img src="http://static.cxfer.cn/img/201608063.png" alt="chrome"><br>6. 最后可以看到Chrome接收到了关闭的命令，但是我无法验证是否真的关闭了。<br><img src="http://static.cxfer.cn/img/201608062.png" alt="chrome"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>具体什么导致的暂时还不清楚，猜测可能是处理某些CSS语句时出现了问题导致屏幕刷新，而且这个办法只能缓解大部分的闪屏，还有一些页面(比如我的博客后台)还是会偶尔闪屏几次。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bash On Windows beta版食用笔记]]></title>
      <url>/2016/08/03/Bash-On-Windows-beta%E7%89%88%E9%A3%9F%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><p>微软于今天发布了Windows一周年版(RS1，1607版，10.0.14393，版本名真多)，其中我感兴趣的就是Bash On Windows这个功能了，这个就是Windows内嵌了一个Linux子系统，只不过目前还是beta版，所以和原生的Ubuntu功能上有些缺陷，不过大部分软件都是可以正常使用的，启动这个功能的方式网上一大堆，这里就不再赘述了。只是有个小坑，开启bash功能后，需要在cmd或powershell里输入bash，它会下载一个镜像文件完成初始化工作，此时它会提示“正在从 Windows 应用商店下载…”，如果你在用一些小运营商的宽度，会立即显示“无法从 Windows 应用商店下载。请检查网络连接。”，然而我打开应用商店却能正常下载应用啊。</p><p><img src="http://static.cxfer.cn/img/201608031.jpg" alt=""></p><p>而事实上它并不是从Windows应用商店上下载的，而且通过访问<a href="https://go.microsoft.com/fwlink/?LinkID=730581" target="_blank" rel="noopener">这里</a>，跳转到<a href="https://wsldownload.azureedge.net/trusty-server-cloudimg-amd64-root.tar.gz" target="_blank" rel="noopener">微软的一个CDN上</a>，而这个CDN并没有国内节点(我写这篇文章的时候，微软已经把那个链接跳转到<a href="https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-root.tar.gz" target="_blank" rel="noopener">Ubuntu网站</a>了，然而依旧没有国内节点)，所以你懂得，而解决办法也很简单，给IE设置个代理就可以了，这个包大小为180.02MB，而且微软的下载机制没有考虑到断点续传，so有一点网络波动，你就得重下(我不会告诉你我下了十几次，真坑啊)。</p><p><img src="http://static.cxfer.cn/img/201608032.jpg" alt=""></p><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>之后你从cmd或者ps里输入bash就可以进入Linux子系统啦，后面的操作就和你用ubuntu一模一样，比如你用ubuntu一般都会换源的吧，默认镜像是14.04的，你按照同样的方法就可以换源了。(其实你直接通过修改<strong>sources.list</strong>就能从14.04升级到16.04了，不过我在<a href="https://github.com/Microsoft/BashOnWindows/issues" target="_blank" rel="noopener">BashOnWindows的issue</a>里看到有人升级会出问题，虽然有解决方法，但是我感觉微软工程师应该是基于14.04进行开发的，所以建议没必要不要升级大版本，除非微软推送镜像包)</p><p></p><pre><code>sudo sed -i &apos;s/archive.ubuntu.com/mirrors.163.com/g&apos; /etc/apt/sources.list
sudo sed -i &apos;s/security.ubuntu.com/mirrors.163.com/g&apos; /etc/apt/sources.list
`&lt;/pre&gt;

## 取消系统提示音

如果你进入shell没有输入认识内容，直接按回车，就会触发系统提示音，反正我觉得这个声音听起来挺烦的，你可以输入

&lt;pre&gt;`sudo echo &quot;set bell-style none&quot; &amp;amp;gt;&amp;amp;gt; ~/.inputrc
`&lt;/pre&gt;

但是这个不能取消掉VIM里的提示声，你可以选择关闭系统声音，按照如下步骤：打开控制面板——&gt;打开硬件和声音——&gt;打开声音——&gt;选择声音——&gt;修改关键性停止的声音方案，来取消提示音。

![](http://static.cxfer.cn/img/201608033.jpg)

## 美化

如果你以后经常用这个子系统，那么肯定不能忍受cmd的字体和配色，我之前用cygwin时喜欢用cmder，但是cmder和bash.exe不兼容，如果你直接输入bash，那么进入子系统后将无法使用方向键和Home/PageUp/PageDown等键，需要输入下面的命令进入bash

&lt;pre&gt;`%windir%\system32\bash.exe -cur_console:p1
`&lt;/pre&gt;

你可以把这个命令加入cmder的启动项里

![](http://static.cxfer.cn/img/201608035.jpg)

我个人习惯用zsh了，而进入这个子系统必须先进入bash(&lt;del&gt;这背后一定有交易，手动滑稽&lt;/del&gt;)，所以启动项里多了个zsh的切换命令。

PS：这个子系统的文件系统和Windows是融合的，进入bash后默认路径为你的用户文件夹内(/mnt/c/Users/Shura)，所以你每次下载时确保当前目录在home目录(~)下，否则你可以会发现你把文件下载到Windows分区里了-XD

## 8月7日更新

感谢 @Snapsisy的方法，输入bash ~即可从~启动bash，不用再切换目录了。

&lt;pre&gt;`%windir%\system32\bash.exe ~ -cur_console:p1
</code></pre><h2 id="最后Show一下"><a href="#最后Show一下" class="headerlink" title="最后Show一下"></a>最后Show一下</h2><p><img src="http://static.cxfer.cn/img/201608034.jpg" alt=""></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bash </tag>
            
            <tag> ubuntu </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[长城宽带等小运营商PPPoE频繁掉线重连解决办法]]></title>
      <url>/2016/07/27/%E9%95%BF%E5%9F%8E%E5%AE%BD%E5%B8%A6%E7%AD%89%E5%B0%8F%E8%BF%90%E8%90%A5%E5%95%86PPPoE%E9%A2%91%E7%B9%81%E6%8E%89%E7%BA%BF%E9%87%8D%E8%BF%9E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><p>个人吐槽，解决办法在最后一段。</p><p>这个月被这个垃圾宽带折腾死了，总是不定期的掉线要重新拨号，这里就要介绍一下了，我家里有两个路由器，一个是如意云(就是现在的联想路由器的前身)刷了OpenWrt系统，另一个就是TP-Link了。</p><p>一开始遇到这个问题，我还以为是我路由器问题，因为把网线直接插电脑可以正常拨号，于是我就换上了家里旧的TP-Link，然后就一切就仿佛正常了，因为我要用路由器全局去广告 :oops: ，所以不得不用上了双路由器。入户线插TP-Link的WAN口关闭其无线模块，然后从其LAN口上用网线与如意云WAN口相连，然后全家设备全连如意云。这样也仿佛没有问题了，可是我还是没有发现问题本质，于是谷歌得知可能是因为OpenWrt默认发送lcp-echo(让运营商服务器发送请求，确认自己是否在线)导致的，因为TP-Link默认不发送lcp-echo，于是我把OpenWrt里的lcp-echo发送间隔调到非常大，等于关闭了。但是问题还是没有解决，只有用TP-Link才正常，用如意云就是不正常。 :-(</p><p>本来到这里，我就打算一直用双路由器了，但是最近几天，断网太频繁了，我也发现并非是因为TP-Link就正常了，而是TP-Link能自动重新进行PPPoE拨号连接，而OpenWrt在PPPoE掉线之后无法重新连接，需要断电重启(就是这个问题害得我研究了好久，真坑啊！)，以前拨号掉线不频繁，TP-Link重连机制让我以为没有问题了。到这里，我就怀疑是不是线路问题，因为我在学校网络中心兼职，平时也帮老师维护这些网络问题，一般这样都是端口接触不良。没辙，只能打电话给客服，维修人员下午来了之后，用测线仪测了一下线路，电信号都正常，为了应付我，他还是给我换了水晶头，然而问题并没有解决，反而更严重了，一晚上能掉十几次线。</p><p>于是我再次骚扰客服，最后他们怀疑我家里装修时埋的网线有问题，要给我重新拉个明线，然而我在家等了一天也没人来拉线，打电话问维修，他说是我家模块有问题，balabala，至此我对长宽维修人员已经彻底失去信心，因为线路是通的，所以我一直坚信是运营商的问题，然后我把网线直接插电脑，一直在那里看有线状态(大哭)，皇天不负有心人，终于发现问题所在了，交换机和电脑网卡端口速率协商有问题，有时候协商出10Mbps,有时候协商出100Mbps，而每次重新协商都会导致有线连接中断，拨号当然也断了啊。这长城宽带为了节省成本，把一根网线分成双绞线，给两户人家用，端口都不知道怎么设置的，导致根本协商不出来正确的速度。</p><p>最后上干货：<strong>请强制设置路由器或者电脑的WAN口速率，4M以下宽带选择10M半双工，4M-8M宽带选择10M全双工，10M-20M宽带选择100M半双工，20M-100M宽带选择100M全双工</strong>。不要相信这些小运营商交换机的自动协商，我估计它们交换机早就年久失修了，实在太坑了啊 :twisted:</p><p>晒个路由器固件，老毛子修改自华硕固件，国人汉化的，我感觉真好用，不用自己折腾。</p><p><img src="http://static.cxfer.cn/2016072702.png" alt=""></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 瞎折腾 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python批量获取京东商品列表信息]]></title>
      <url>/2016/07/27/Python%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9C%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><p>今天在逛网站的时候无意间发现一个京东获取单个商品价格接口：</p><blockquote><p><a href="http://p.3.cn/prices/mgets?skuIds=J_商品ID&amp;type=1" target="_blank" rel="noopener">http://p.3.cn/prices/mgets?skuIds=J_商品ID&amp;type=1</a> 用例<br>ps:商品ID这么获取:<a href="http://item.jd.com/954086.html" target="_blank" rel="noopener">http://item.jd.com/954086.html</a></p></blockquote><p>于是我就从Google上找了<a href="http://playbear.github.io/2015/10/18/jd-woods/" target="_blank" rel="noopener">利用此接口批量获取价格信息的源码</a>，稍作修改使其支持Python3(PS:通过这段代码，我对Python的易用性不再怀疑了，23333)</p><pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests
from bs4 import BeautifulSoup

url = &apos;http://list.jd.com/list.html?cat=9987,653,655&amp;amp;page=1&amp;amp;delivery=1&amp;amp;trans=1&amp;amp;JL=4_21_0&apos;
request = requests.get(url)
soup = BeautifulSoup(request.text, &quot;html.parser&quot;)
items = soup.select(&apos;li.gl-item&apos;)
i = 1
for item in items:
    sku = item.find(&apos;div&apos;)[&apos;data-sku&apos;]
    price_url = &apos;http://p.3.cn/prices/mgets?skuIds=J_&apos; + str(sku)
    price = requests.get(price_url).json()[0][&apos;p&apos;]
    name = item.find(&apos;div&apos;, class_=&quot;p-name&quot;).find(&apos;em&apos;).string
    item_url = &apos;http:&apos; + item.find(&apos;div&apos;, class_=&quot;p-name&quot;).find(&apos;a&apos;)[&apos;href&apos;]
    commit = item.find(&apos;div&apos;, class_=&quot;p-commit&quot;).find(&apos;a&apos;).string
    print(&quot;%d、\n 名称: %s \n 价格: %s 元 \n 评价: %s 个 \n 链接: %s&quot; % (i, name, price, commit, item_url))
    if i &amp;gt;= 10:
        break
    else:
        i += 1
</code></pre><p>效果：<br><img src="http://static.cxfer.cn/2016072701.png" alt=""></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 瞎折腾 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 使用笔记]]></title>
      <url>/2016/07/23/Ubuntu%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h2 id="Ubuntu添加可信任根证书"><a href="#Ubuntu添加可信任根证书" class="headerlink" title="Ubuntu添加可信任根证书"></a>Ubuntu添加可信任根证书</h2><pre><code>➜sudo cp CA.crt /usr/local/share/ca-certificates
➜sudo update-ca-certificates
Updating certificates in /etc/ssl/certs... 1 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d... done. 
`&lt;/pre&gt;

注：此方法添加的根证书无法删除(大雾)
&lt;/p&gt;

## 将证书加入java中

&lt;pre&gt;`keytool -keystore cacerts -importcert -alias xxnetca -file {the_path_to_ca_file}  
</code></pre><p>参考：<a href="http://https://azure.microsoft.com/en-us/documentation/articles/java-add-certificate-ca-store/" target="_blank" rel="noopener">Add a certificate to the Java CA store | Microsoft Azure</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[小坑] Android 6.0 获取SD卡等危险权限]]></title>
      <url>/2016/04/20/Android-6.0-%E8%8E%B7%E5%8F%96SD%E5%8D%A1%E7%AD%89%E5%8D%B1%E9%99%A9%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><p>因为Android 6.0(Android sdk 23)中，增加的动态权限的功能，将所有权限划为普通权限和危险权限，而读写SD卡则被划为危险权限，所以需要在主线程中动态申请。但是我按照Google来的代码却不能弹出申请权限的窗口。</p><pre lang="java">String[] perms = {"android.permission.READ_EXTERNAL_STORAGE"};
int permsRequestCode = 200;
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    requestPermissions(perms, permsRequestCode);
}
</pre><p>最后折腾了半天才发现，是我理解错了，危险权限也要先在AndroidManifest.xml中声明：</p><pre lang="xml"><uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"></uses-permission></pre><p>再在代码中请求获取权限才能进行正常的授权流程。所以Android 6.0并不是废除了在AndroidManifest.xml中声明权限的功能，而是增加了用户授权的步骤，危险权限要请求用户授权才能使用。</p><p>&nbsp;</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows配置Cygwin或msys2模拟Linux终端环境]]></title>
      <url>/2016/04/09/Windows%E9%85%8D%E7%BD%AECygwin%E6%88%96msys2%E6%A8%A1%E6%8B%9FLinux%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><h2 id="Update-2016-08-20-推荐使用msys2"><a href="#Update-2016-08-20-推荐使用msys2" class="headerlink" title="(Update:2016-08-20)推荐使用msys2"></a>(Update:2016-08-20)推荐使用msys2</h2><p>今天试了一下msys2,真的比cygwin好用多了，主要体现在包管理上，而且软件包都比cygwin新。大家可以按照<a href="https://segmentfault.com/a/1190000002789600" target="_blank" rel="noopener">从cygwin迁移到msys2的原因和步骤</a>中的步骤来迁移。之前有人评论让我用msys2，我没有去尝试而且还敷衍了他，现在向他表示歉意。</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>今天想个Windows配个linux终端，但网上的cygwin安装教程都比较旧，软件链接基本都失效了，所以我折腾了一下，整理了这篇笔记。(非常期待Windows预览版内置的Linux 子系统，这篇笔记可能以后就用不上喽！)</p><p></p><p><img src="http://static.cxfer.cn/20160409164529.png" alt="Cygwin"></p><ol><li><p>下载Cygwin<br><a href="https://cygwin.com/setup-x86_64.exe，默认安装之后，将C:\cygwin64\bin加入环境变量path中(Windows" target="_blank" rel="noopener">https://cygwin.com/setup-x86_64.exe，默认安装之后，将C:\cygwin64\bin加入环境变量path中(Windows</a> 10的环境变量比之前好多了，能够将每条记录分行编辑，不用担心漏掉分号了)</p></li><li><p>配置apt-cyg<br>在Cygwin64 Terminal里输入：</p><pre lang="bash">lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg && apt-cyg install apt-cyg /bin</pre></li><li><p>设置apt-cyg缓存</p><pre lang="bash">apt-cyg cache /cygdrive/d/Download/cygwin -m http://mirrors.ustc.edu.cn/cygwin/</pre></li><li><p>测试安装<br><pre lang="bash">apt-cyg install vim</pre><br>注意：用ustc源安装软件可能遇到”<span style="color:red">sha512sum: 警告：1 个校验和不匹配</span>“的错误，这时请确保你卸载了wget，使用它自带的lynx下载软件包，才能能跳过校验安装软件。</p></li><li><p>配置zsh<br>以管理员身份运行终端，安装zsh git curl，然后touch ~/.zshrc，再运行<br><pre lang="bash">sh -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a>)”</pre><br>安装ohMyZsh</p></li><li><p>备注</p></li></ol><p>dig命令的包名为：bind-utils</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> cygwin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA只有传值调用(call by value)]]></title>
      <url>/2016/03/21/JAVA%E5%8F%AA%E6%9C%89%E4%BC%A0%E5%80%BC%E8%B0%83%E7%94%A8(call%20by%20value)/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><pre><code>目前程序设计语言中有关将参数传递给函数调用有两种方法，按值传递(call by value)和按引用传递(call by reference)(C语言中可以通过指针直接传递地址，和传引用效果类似)。因为我之前是学C++的，所以想当然认为JAVA也有这两种参数传递方式。可是看书之后才知道Java里只有传值调用，即在调用函数时，传递给形参的永远都是实参的副本，无论形参是基本数据类型(int,boolean)还是对象。

假设如果Java传递对象是按引用传递的，那么下列代码的结果应该是b,a。可是实际结果还是a,b，说明swap函数没有成功交换两个对象。
</code></pre><pre lang="java">class Employee{
    private String name;
    public Employee(String name){
        this.name = name;
    }
    public void getName(){
        System.out.println(this.name);
    }
}

public class Study {
    public static void swap(Employee x, Employee y){
        Employee tmp;
        tmp = x;
        x = y;
        y = tmp;
    }
    public static void main(String[] args) {
        Employee a = new Employee("a");
        Employee b = new Employee("b");
        swap(a,b);
        a.getName();
        b.getName();
    }
}</pre><pre><code>但是如果按值调用，为什么能修改传入函数中对象的属性呢？如果之前有C/C++基础，从指针角度理解，很容易就想通了。先上一直我做的渣图。a、b为实参，x、y为形参，当调用swap()是，你可以理解Java新生成了a的值，并且将其赋值给了x，y亦然。然后这四个变量相当于四个指针，他们分别指向两块堆内存空间，如果修改对象属性，那么通过这个指向关系，通过成功修改堆内存空间里的内容，如果想交换对象，那么在函数内交换的只是形参的指向关系(如红色箭头所示)，并不会影响到a、b对象的指向关系。
</code></pre><p><img src="http://static.cxfer.cn/javacallbyvalue.jpg" alt="Java函数传递关系"></p><p>总结：Java只有传值调用，函数调用不能修改基本数据类型参数的内容，可以修改对象参数的属性内容，不能修改对象参数的指向关系，即不能让对象参数引用到别的对象上去。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[蓝桥杯]算法训练-数字三角形]]></title>
      <url>/2016/03/11/%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%5D%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><p><img src="http://static.cxfer.cn/20160311172255.jpg" alt="题目描述"><br><strong>[解题思路]</strong><br>一开始看到这题，我想到的思路是从上向下遍历，然后将每个结果都存储起来，然而按照这个思路实现了一下，发现代码太长了，而且不能完全AC。然后就想到了是不是用动态规划求解，也想了一些思路，但是奈何水平不够，实现不了。于是就求助人类的希望Google(大雾)，找到了一种特别简单而且高效的思路，用记忆化搜索。从下向遍历三角形，并且每次都将此次运算的结果储存起来，生成一个新的三角形，直到只剩一个元素，即为要求的最大值了。<br><strong>[代码]</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span> a[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">			<span class="keyword">if</span>(a[i+<span class="number">1</span>][j+<span class="number">1</span>] &gt; a[i+<span class="number">1</span>][j])</span><br><span class="line">				a[i][j] += a[i+<span class="number">1</span>][j+<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				a[i][j] += a[i+<span class="number">1</span>][j];</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> OJ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> oj </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php7.0与Mysql5.7的连接使用]]></title>
      <url>/2016/03/09/php7%E4%B8%8EMysql5.7%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<!-- build time:Sat Feb 03 2018 20:31:29 GMT+0800 (CST) --><p>我这个博客用的是linuxeye制作的lnmp安装脚本搭建的，因为用于个人折腾不用于生产环境，所以打算折腾一下，于是配了个php7与mysql5.7的环境，还启用了https协议，但是因为这个腾讯云的VPS配置太低，无法成功编译mysql，于是我只能用官方的deb包直接安装二进制文件，但是安装完成之后，发现php一直无法连接mysql，研究了半天发现是php_mysqli扩展的配置问题，使用deb安装的mysql5.7社区版的sock链接默认为/var/run/mysqld/mysqld.sock，所以需要修改php.ini：</p><p><pre lang="bash">mysqli.default_socket = /var/run/mysqld/mysqld.sock</pre><br>然后重启php-fpm服务即可。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
